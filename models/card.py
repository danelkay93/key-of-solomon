# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2025-04-04T16:36:33+00:00

from __future__ import annotations
from typing import Annotated, Any, List
from pydantic import BaseModel, ConfigDict, Field, RootModel


class Cost(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: Annotated[int, Field(ge=-2)]


class DeckRequirements(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: Annotated[str, Field(min_length=0)]


class EnemyDamage(Cost):
    pass


class EnemyEvade(Cost):
    pass


class EnemyFight(Cost):
    pass


class EnemyHorror(Cost):
    pass


class Health(Cost):
    pass


class Sanity(Cost):
    pass


class SubtypeCode(DeckRequirements):
    pass


class Victory(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: Annotated[int, Field(ge=0)]


class Xp(Victory):
    pass


class Model(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    back_text: Annotated[str | None, Field(min_length=1)] = None
    back_flavor: Annotated[str | None, Field(min_length=0)] = None
    code: Annotated[str, Field(pattern='^[0-9a-z]{5}[0-9a-z]?$')]
    cost: Annotated[Cost | None, Field(union_mode='smart')] = None
    deck_requirements: Annotated[DeckRequirements | None, Field(union_mode='smart')] = None
    deck_options: Annotated[List | None, Field(union_mode='smart')] = None
    deck_limit: Annotated[int | None, Field(ge=0)] = None
    double_sided: bool | None = None
    duplicate_of: Annotated[str | None, Field(pattern='^[0-9a-z]{5}[0-9a-z]?$')] = None
    enemy_damage: Annotated[EnemyDamage | None, Field(union_mode='smart')] = None
    enemy_evade: Annotated[EnemyEvade | None, Field(union_mode='smart')] = None
    enemy_fight: Annotated[EnemyFight | None, Field(union_mode='smart')] = None
    enemy_horror: Annotated[EnemyHorror | None, Field(union_mode='smart')] = None
    exceptional: bool | None = None
    exile: bool | None = None
    faction_code: Annotated[str | None, Field(min_length=1)] = None
    flavor: Annotated[str | None, Field(min_length=0)] = None
    health: Annotated[Health | None, Field(union_mode='smart')] = None
    illustrator: Annotated[str | None, Field(pattern='.*')] = None
    name: Annotated[str | None, Field(min_length=1)] = None
    pack_code: Annotated[str, Field(max_length=10, min_length=2)]
    permanent: bool | None = None
    position: Annotated[int, Field(ge=1)]
    quantity: Annotated[int, Field(ge=1)]
    restrictions: Annotated[str | None, Field(min_length=1)] = None
    skill_agility: Annotated[int | None, Field(ge=-2)] = None
    skill_combat: Annotated[int | None, Field(ge=-2)] = None
    skill_intellect: Annotated[int | None, Field(ge=-2)] = None
    skill_wild: Annotated[int | None, Field(ge=0)] = None
    skill_willpower: Annotated[int | None, Field(ge=-2)] = None
    sanity: Annotated[Sanity | None, Field(union_mode='smart')] = None
    slot: Annotated[str | None, Field(min_length=1)] = None
    subname: Annotated[str | None, Field(min_length=1)] = None
    subtype_code: Annotated[SubtypeCode | None, Field(union_mode='smart')] = None
    text: Annotated[str | None, Field(min_length=1)] = None
    traits: Annotated[str | None, Field(min_length=0)] = None
    type_code: Annotated[str | None, Field(min_length=1)] = None
    victory: Annotated[Victory | None, Field(union_mode='smart')] = None
    is_unique: Annotated[Any | None, Field(json_schema_extra={'oneof': [{'type': 'boolean'}, {'type': 'null'}]})] = None
    xp: Annotated[Xp | None, Field(union_mode='smart')] = None
